name: Update Latest YouTube Video

on:
  schedule:
    - cron: '0 0 * * SUN'  # Runs at 00:00 UTC every Sunday
  workflow_dispatch:  # Allows manual trigger

jobs:
  update-video:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install googleapis --force

      - name: Fetch Latest Video
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          node << 'EOF'
          const { google } = require('googleapis');
          const fs = require('fs');
          const path = require('path');

          async function getLatestVideo() {
            if (!process.env.YOUTUBE_API_KEY) {
              throw new Error('YouTube API key is not set in environment variables');
            }

            const youtube = google.youtube({
              version: 'v3',
              auth: process.env.YOUTUBE_API_KEY
            });

            try {
              const channelResponse = await youtube.channels.list({
                part: ['id'],
                forUsername: 'jyotirmoydotdev'
              });

              let channelId;
              if (!channelResponse.data.items || channelResponse.data.items.length === 0) {
                channelId = 'UC8DwWOpAGrGdi5jjIKhPw8g';
              } else {
                channelId = channelResponse.data.items[0].id;
              }

              const uploads = await youtube.search.list({
                part: ['snippet'],
                channelId: channelId,
                order: 'date',
                maxResults: 1,
                type: 'video'
              });

              if (!uploads.data.items || uploads.data.items.length === 0) {
                throw new Error('No videos found for the channel');
              }

              const video = uploads.data.items[0];
              return {
                title: video.snippet.title,
                date: video.snippet.publishedAt,
                embedUrl: `https://www.youtube.com/embed/${video.id.videoId}`
              };
            } catch (error) {
              console.error('YouTube API Error:', error.response?.data || error.message);
              throw error;
            }
          }

          async function updateDataFile() {
            const latestVideo = await getLatestVideo();
            const dataPath = path.join(process.cwd(), 'src', 'data.ts');
            
            if (!fs.existsSync(dataPath)) {
              throw new Error('data.ts file does not exist');
            }

            // Read the entire file content
            let fileContent = fs.readFileSync(dataPath, 'utf8');

            // Find the video array in the file
            const videoArrayMatch = fileContent.match(/export const video(?::\s*{[^}]+})?\s*=\s*(\[[\s\S]*?\]);/);
            if (!videoArrayMatch) {
              throw new Error('Could not find video array in data.ts');
            }

            // Parse the existing video array
            let videos = [];
            try {
              // Remove any type annotations before parsing
              const arrayString = videoArrayMatch[1].replace(/:\s*{[^}]+}/g, '');
              videos = JSON.parse(arrayString);
            } catch (error) {
              console.error('Error parsing existing video array:', error);
              throw error;
            }

            // Add new video if it doesn't exist
            const videoExists = videos.some(v => v.embedUrl === latestVideo.embedUrl);
            if (!videoExists) {
              videos.unshift(latestVideo);
              console.log('Added new video:', latestVideo.title);

              // Replace only the video array in the file content
              const newVideoArray = `export const video: {title: string, date: string, embedUrl: string}[] = ${JSON.stringify(videos, null, 2)}`;
              fileContent = fileContent.replace(/export const video\s*=\s*\[[\s\S]*?\];/, newVideoArray);

              // Write the updated content back to the file
              fs.writeFileSync(dataPath, fileContent);
              console.log('Successfully updated video array in data.ts');
            } else {
              console.log('Video already exists in data.ts');
            }
          }

          updateDataFile().catch(error => {
            console.error('Failed to update video data:', error);
            process.exit(1);
          });
          EOF

      - name: Commit and push if changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add src/data.ts
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update latest YouTube video" && git push)